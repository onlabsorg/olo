<%  title = "olowiki expression: L ^ R"  %>
<%  __render__ = import("/bin/markdown")  %>

<% test = import("/bin/test") %>
<% foo: () -> "this is a function" %>


##### When L is NOTHING
* It should return NOTHING if R is NOTHING                                      <% test(NOTHING ^ NOTHING == NOTHING) %>
* It should return NOTHING if R is a number                                     <% test(NOTHING ^ 10 == NOTHING) %>
* It should return NOTHING if R is a string                                     <% test(NOTHING ^ "abc" == NOTHING) %>
* It should return NOTHING if R is a function                                   <% test(NOTHING ^ foo == NOTHING) %>
* It should return NOTHING if R is a list                                       <% test(NOTHING ^ [1,2,3] == NOTHING) %>
* It should return NOTHING if R is a namespace                                  <% test(NOTHING ^ {a=1,b=2,c=3} == NOTHING) %>

##### When L is a number
* It should return NOTHING if R is NOTHING                                      <% test(10 ^ NOTHING == NOTHING) %>
* It should return L to the power of R if R is a number                         <% test(10 ^ 3 == 1000) %>
* It should throw an error if R is a string                                     <% test.throws({__call__: () -> 10 ^ "abc"}) %>
* It should throw an error if R is a function                                   <% test.throws({__call__: () -> 10 ^ foo}) %>
* It should throw an error if R is a list                                       <% test.throws({__call__: () -> 10 ^ [] }) %>
* It should throw an error if R is a namespace                                  <% test.throws({__call__: () -> 10 ^ {} }) %>

##### When L is a string
* It should return NOTHING if R is NOTHING                                      <% test("abc" ^ NOTHING == NOTHING) %>
* It should throw an error if R is a number                                     <% test.throws({__call__: () -> "abc" ^ 10}) %>
* It should throw an error if R is a string                                     <% test.throws({__call__: () -> "abc" ^ "def"}) %>
* It should throw an error if R is a function                                   <% test.throws({__call__: () -> "abc" ^ foo}) %>
* It should throw an error if R is a list                                       <% test.throws({__call__: () -> "abc" ^ [] }) %>
* It should throw an error if R is a namespace                                  <% test.throws({__call__: () -> "abc" ^ {} }) %>

##### When L is a function
* It should return NOTHING if R is NOTHING                                      <% test(foo ^ NOTHING == NOTHING) %>
* It should throw an error if R is a number                                     <% test.throws({__call__: () -> foo ^ 10}) %>
* It should throw an error if R is a string                                     <% test.throws({__call__: () -> foo ^ "abc"}) %>
* It should throw an error if R is a function                                   <% test.throws({__call__: () -> foo ^ foo}) %>
* It should throw an error if R is a list                                       <% test.throws({__call__: () -> foo ^ [] }) %>
* It should throw an error if R is a namespace                                  <% test.throws({__call__: () -> foo ^ {} }) %>

##### When L is a list
* It should return NOTHING if R is NOTHING                                      <% test([1,2,3] ^ NOTHING == NOTHING) %>
* It should throw an error if R is a number                                     <% test.throws({__call__: () -> [1,2,3] ^ 10}) %>
* It should throw an error if R is a string                                     <% test.throws({__call__: () -> [1,2,3] ^ "abc"}) %>
* It should throw an error if R is a function                                   <% test.throws({__call__: () -> [1,2,3] ^ foo}) %>
* It should throw an error if R is a list                                       <% test.throws({__call__: () -> [1,2,3] ^ [] }) %>
* It should throw an error if R is a namespace                                  <% test.throws({__call__: () -> [1,2,3] ^ {} }) %>

##### When L is a namespace
* It should return NOTHING if R is NOTHING                                      <% test({a=1,b=2,c=3} ^ NOTHING == NOTHING) %>
* It should throw an error if R is a number                                     <% test.throws({__call__: () -> {a=1,b=2,c=3} ^ 10}) %>
* It should throw an error if R is a string                                     <% test.throws({__call__: () -> {a=1,b=2,c=3} ^ "abc"}) %>
* It should throw an error if R is a function                                   <% test.throws({__call__: () -> {a=1,b=2,c=3} ^ foo}) %>
* It should throw an error if R is a list                                       <% test.throws({__call__: () -> {a=1,b=2,c=3} ^ [] }) %>
* It should throw an error if R is a namespace                                  <% test.throws({__call__: () -> {a=1,b=2,c=3} ^ {} }) %>
* It should delegate to `L.__pow__(R)` if it exists                             <% L = {__pow__: (R) -> 10 ^ R} %> <% test(L ^ 2 == 100) %>
