<%  title = "olowiki expression: L + R"  %>
<%  __render__ = import("/bin/markdown")  %>

<% test = import("/bin/test") %>
<% foo: () -> "this is a function" %>


##### When L is NOTHING
<% R = {__add__: (L) -> `NOTHING + 1`} %>
* It should return NOTHING if R is NOTHING                                      <% test(NOTHING + NOTHING == NOTHING) %>
* It should return R if it is a number                                          <% test(NOTHING + 10 == 10) %>
* It should return R if it is a string                                          <% test(NOTHING + "abc" == "abc") %>
* It should return R if it is a function                                        <% test(NOTHING + foo == foo) %>
* It should return R if it is a list                                            <% test(NOTHING + [1,2,3] == [1,2,3]) %>
* It should return R if it is a namespace                                       <% test(NOTHING + {a=1,b=2,c=3} == {a=1,b=2,c=3}) %>
* It should delegate to `R.__add__(L)` if it exists                             <% test(NOTHING + R == "NOTHING + 1") %>

##### When L is a number
<% R = {__add__: (L) -> L + 1} %>
* It should return L if R is NOTHING                                            <% test(10 + NOTHING == 10) %>
* It should return the sum of L and R if R is a number                          <% test(10 + 20 == 30) %>
* It should throw an error if R is a string                                     <% test.throws({__call__: () -> 10 + "abc"}) %>
* It should throw an error if R is a function                                   <% test.throws({__call__: () -> 10 + foo}) %>
* It should throw an error if R is a list                                       <% test.throws({__call__: () -> 10 + [] }) %>
* It should throw an error if R is a namespace                                  <% test.throws({__call__: () -> 10 + {} }) %>
* It should delegate to `R.__add__(L)` if it exists                             <% test(10 + R == 11) %>

##### When L is a string
<% R = {__add__: (L) -> "R plus " + L} %>
* It should return L if R is NOTHING                                            <% test("abc" + NOTHING == "abc") %>
* It should throw an error if R is a number                                     <% test.throws({__call__: () -> "abc" + 10}) %>
* It should return the concatenation of L and R if also R is a string           <% test("abc" + "def" == "abcdef") %>
* It should throw an error if R is a function                                   <% test.throws({__call__: () -> "abc" + foo}) %>
* It should throw an error if R is a list                                       <% test.throws({__call__: () -> "abc" + [] }) %>
* It should throw an error if R is a namespace                                  <% test.throws({__call__: () -> "abc" + {} }) %>
* It should delegate to `R.__add__(L)` if it exists                             <% test("abc" + R == "R plus abc") %>

##### When L is a function
<% R = {__add__: (L) -> "R plus foo"} %>
* It should return L if R is NOTHING                                            <% test(foo + NOTHING == foo) %>
* It should throw an error if R is a number                                     <% test.throws({__call__: () -> foo + 10}) %>
* It should throw an error if R is a string                                     <% test.throws({__call__: () -> foo + "abc"}) %>
* It should throw an error if R is a function                                   <% test.throws({__call__: () -> foo + foo}) %>
* It should throw an error if R is a list                                       <% test.throws({__call__: () -> foo + [] }) %>
* It should throw an error if R is a namespace                                  <% test.throws({__call__: () -> foo + {} }) %>
* It should delegate to `R.__add__(L)` if it exists                             <% test(foo + R == "R plus foo") %>

##### When L is a list
<% L = [1,2,3] %>
<% R = {__add__: (L) -> "R plus [" + L[1] + L[2] + L[3] + "]" } %>
* It should return L if R is NOTHING                                            <% test(L + NOTHING == L) %>
* It should throw an error if R is a number                                     <% test.throws({__call__: () -> L + 10}) %>
* It should throw an error if R is a string                                     <% test.throws({__call__: () -> L + "abc"}) %>
* It should throw an error if R is a function                                   <% test.throws({__call__: () -> L + foo}) %>
* It should return L concatenated with R if R is a list                         <% test(L + [4,5,6] == [1,2,3,4,5,6] ) %>
* It should throw an error if R is a namespace                                  <% test.throws({__call__: () -> L + {} }) %>
* It should delegate to `R.__add__(L)` if it exists                             <% test(['A','B','C'] + R == "R plus [ABC]" ) %>

##### When L is a namespace
<% L = {a=1,b=2,c=3} %>
<% L1 = {__add__: (R) -> 1+R} %>
<% R1 = {__add__: (L) -> L.b * 10} %>
* It should return L if R is NOTHING                                            <% test(L + NOTHING == L) %>
* It should throw an error if R is a number                                     <% test.throws({__call__: () -> L + 10}) %>
* It should throw an error if R is a string                                     <% test.throws({__call__: () -> L + "abc"}) %>
* It should throw an error if R is a function                                   <% test.throws({__call__: () -> L + foo}) %>
* It should throw an error if R is a list                                       <% test.throws({__call__: () -> L + [] }) %>
* It should return L merged with R if it is a namespace                         <% test(L + {d=4,e=5} == {a=1,b=2,c=3,d=4,e=5} ) %>
* It should delegate to `L.__add__(R)` if it exists                             <% test(L1 + 10 == 11) %>
* It should delegate to `R.__add__(L)` if it exists                             <% test(L + R1 == 20 ) %>
