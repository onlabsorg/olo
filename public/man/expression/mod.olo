<%  title = "olowiki expression: L mod R"  %>
<%  __render__ = import("/bin/markdown")  %>

<% test = import("/bin/test") %>
<% foo: () -> "this is a function" %>


##### When L is NOTHING
* It should return NOTHING if R is NOTHING                                      <% test(NOTHING mod NOTHING == NOTHING) %>
* It should return NOTHING if R is a number                                     <% test(NOTHING mod 10 == NOTHING) %>
* It should return NOTHING if R is a string                                     <% test(NOTHING mod "abc" == NOTHING) %>
* It should return NOTHING if R is a function                                   <% test(NOTHING mod foo == NOTHING) %>
* It should return NOTHING if R is a list                                       <% test(NOTHING mod [1,2,3] == NOTHING) %>
* It should return NOTHING if R is a namespace                                  <% test(NOTHING mod {a=1,b=2,c=3} == NOTHING) %>

##### When L is a number
* It should return NOTHING if R is NOTHING                                      <% test(10 mod NOTHING == NOTHING) %>
* It should return the remainder of L/R if R is a number                        <% test(10 mod 3 == 1) %>
* It should throw an error if R is a string                                     <% test.throws({__call__: () -> 10 mod "abc"}) %>
* It should throw an error if R is a function                                   <% test.throws({__call__: () -> 10 mod foo}) %>
* It should throw an error if R is a list                                       <% test.throws({__call__: () -> 10 mod [] }) %>
* It should throw an error if R is a namespace                                  <% test.throws({__call__: () -> 10 mod {} }) %>

##### When L is a string
* It should return NOTHING if R is NOTHING                                      <% test("abc" mod NOTHING == NOTHING) %>
* It should throw an error if R is a number                                     <% test.throws({__call__: () -> "abc" mod 10}) %>
* It should throw an error if R is a string                                     <% test.throws({__call__: () -> "abc" mod "def"}) %>
* It should throw an error if R is a function                                   <% test.throws({__call__: () -> "abc" mod foo}) %>
* It should throw an error if R is a list                                       <% test.throws({__call__: () -> "abc" mod [] }) %>
* It should throw an error if R is a namespace                                  <% test.throws({__call__: () -> "abc" mod {} }) %>

##### When L is a function
* It should return NOTHING if R is NOTHING                                      <% test(foo mod NOTHING == NOTHING) %>
* It should throw an error if R is a number                                     <% test.throws({__call__: () -> foo mod 10}) %>
* It should throw an error if R is a string                                     <% test.throws({__call__: () -> foo mod "abc"}) %>
* It should throw an error if R is a function                                   <% test.throws({__call__: () -> foo mod foo}) %>
* It should throw an error if R is a list                                       <% test.throws({__call__: () -> foo mod [] }) %>
* It should throw an error if R is a namespace                                  <% test.throws({__call__: () -> foo mod {} }) %>

##### When L is a list
* It should return NOTHING if R is NOTHING                                      <% test([1,2,3] mod NOTHING == NOTHING) %>
* It should throw an error if R is a number                                     <% test.throws({__call__: () -> [1,2,3] mod 10}) %>
* It should throw an error if R is a string                                     <% test.throws({__call__: () -> [1,2,3] mod "abc"}) %>
* It should throw an error if R is a function                                   <% test.throws({__call__: () -> [1,2,3] mod foo}) %>
* It should throw an error if R is a list                                       <% test.throws({__call__: () -> [1,2,3] mod [] }) %>
* It should throw an error if R is a namespace                                  <% test.throws({__call__: () -> [1,2,3] mod {} }) %>

##### When L is a namespace
* It should return NOTHING if R is NOTHING                                      <% test({a=1,b=2,c=3} mod NOTHING == NOTHING) %>
* It should throw an error if R is a number                                     <% test.throws({__call__: () -> {a=1,b=2,c=3} mod 10}) %>
* It should throw an error if R is a string                                     <% test.throws({__call__: () -> {a=1,b=2,c=3} mod "abc"}) %>
* It should throw an error if R is a function                                   <% test.throws({__call__: () -> {a=1,b=2,c=3} mod foo}) %>
* It should throw an error if R is a list                                       <% test.throws({__call__: () -> {a=1,b=2,c=3} mod [] }) %>
* It should throw an error if R is a namespace                                  <% test.throws({__call__: () -> {a=1,b=2,c=3} mod {} }) %>
* It should delegate to `L.__mod__(R)` if it exists                             <% L = {__mod__: (R) -> 10 mod R} %> <% test(L mod 4 == 2) %>
