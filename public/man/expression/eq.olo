<%  title = "olowiki expression: L == R"  %>
<%  __render__ = import("/bin/markdown")  %>

<% test = import("/lib/test") %>
<% check = test.check %>

<% LLT = {__vs__: (R) -> -100} %>
<% LEQ = {__vs__: (R) -> 0} %>
<% LGT = {__vs__: (R) -> 100} %>


##### When L is NOTHING
* <% check(NOTHING==NOTHING)            %> Expect `NOTHING == NOTHING` to be `TRUE`
* <% check(not(NOTHING==10))            %> Expect `FALSE` if R is a number
* <% check(not(NOTHING=="abc"))         %> Expect `FALSE` if R is a string
* <% check(not(NOTHING==[10,20,30]))    %> Expect `FALSE` if R is a list
* <% check(not(NOTHING=={}))            %> Expect `FALSE` if R is a namespace
* <% check(not(NOTHING == LLT))       %> Expect `FALSE` if `R.__vs__(L)` returns a negative number
* <% check(not(NOTHING == LEQ))       %> Expect `FALSE` if `R.__vs__(L)` returns 0
* <% check(not(NOTHING == LGT))       %> Expect `FALSE` if `R.__vs__(L)` returns a positive number

##### When L is a number
* <% check(not(10==NOTHING))    %> Expect `FALSE` when R is `NOTHING`
* <% check(10==10)              %> Expect `TRUE` if R is the same number
* <% check(not(10==20))         %> Expect `FALSE` if R is a different number
* <% check(not(10=="abc"))      %> Expect `FALSE` when R is a string
* <% check(not(10==[10,20,30])) %> Expect `FALSE` when R is a list
* <% check(not(10=={}))         %> Expect `FALSE` when R is a namespace
* <% check(not(10 == LLT))       %> Expect `FALSE` if `R.__vs__(L)` returns a negative number
* <% check(not(10 == LEQ))       %> Expect `FALSE` if `R.__vs__(L)` returns 0
* <% check(not(10 == LGT))       %> Expect `FALSE` if `R.__vs__(L)` returns a positive number

##### When L is a string
* <% check(not("abc"==NOTHING))     %> Expect `FALSE` wher R is `NOTHING`
* <% check(not("abc"==10))          %> Expect `FALSE` when R is a number
* <% check("abc"=="abc")            %> Expect `TRUE` when R is the same string
* <% check(not("abc"=="def"))       %> Expect `FALSE` when R is a different string
* <% check(not("abc"==[10,20,30]))  %> Expect `FALSE` when R is a list
* <% check(not("abc"=={}))          %> Expect `FALSE` when R is a namespace
* <% check(not("abc" == LLT))       %> Expect `FALSE` if `R.__vs__(L)` returns a negative number
* <% check(not("abc" == LEQ))       %> Expect `FALSE` if `R.__vs__(L)` returns 0
* <% check(not("abc" == LGT))       %> Expect `FALSE` if `R.__vs__(L)` returns a positive number

##### When L is a list
* <% check(not([10,20,30]==NOTHING))     %> Expect `FALSE` wher R is `NOTHING`
* <% check(not([10,20,30]==10))          %> Expect `FALSE` when R is a number
* <% check(not([10,20,30]=="abc"))       %> Expect `FALSE` when R is a string
* <% check([10,20,30]==[10,20,30])       %> Expect `TRUE` when R is the same list
* <% check(not([10,20,30]==[40,50,60]))  %> Expect `FALSE` when R is a different list
* <% check(not([10,20,30]=={}))          %> Expect `FALSE` when R is a namespace
* <% check(not([10,20,30] == LLT))       %> Expect `FALSE` if `R.__vs__(L)` returns a negative number
* <% check(not([10,20,30] == LEQ))       %> Expect `FALSE` if `R.__vs__(L)` returns 0
* <% check(not([10,20,30] == LGT))       %> Expect `FALSE` if `R.__vs__(L)` returns a positive number

##### When L is a namespace
* <% check(not({a=10, b=20, c=30}==NOTHING))             %> Expect `FALSE` wher R is `NOTHING`
* <% check(not(LLT == NOTHING))                          %> Expect `FALSE` when R is `NOTHING` and `L.__vs__(R)` returns a negative number
* <% check(not(LEQ == NOTHING))                          %> Expect `FALSE` when R is `NOTHING` and `L.__vs__(R)` returns 0
* <% check(not(LGT == NOTHING))                          %> Expect `FALSE` when R is `NOTHING` and `L.__vs__(R)` returns a positive number
* <% check(not({a=10, b=20, c=30}==10))                  %> Expect `FALSE` when R is a number
* <% check(not(LLT == 10))                               %> Expect `FALSE` when R is a number and `L.__vs__(R)` returns a negative number
* <% check(not(LEQ == 10))                               %> Expect `FALSE` when R is a number and `L.__vs__(R)` returns 0
* <% check(not(LGT == 10))                               %> Expect `FALSE` when R is a number and `L.__vs__(R)` returns a positive number
* <% check(not({a=10, b=20, c=30}=="abc"))               %> Expect `FALSE` when R is a string
* <% check(not(LLT == "abc"))                            %> Expect `FALSE` when R is a string and `L.__vs__(R)` returns a negative number
* <% check(not(LEQ == "abc"))                            %> Expect `FALSE` when R is a string and `L.__vs__(R)` returns 0
* <% check(not(LGT == "abc"))                            %> Expect `FALSE` when R is a string and `L.__vs__(R)` returns a positive number
* <% check(not({a=10, b=20, c=30}==[10,20,30]))          %> Expect `FALSE` when R is a list
* <% check(not(LLT == [10,20,30]))                       %> Expect `FALSE` when R is a list and `L.__vs__(R)` returns a negative number
* <% check(not(LEQ == [10,20,30]))                       %> Expect `FALSE` when R is a list and `L.__vs__(R)` returns 0
* <% check(not(LGT == [10,20,30]))                       %> Expect `FALSE` when R is a list and `L.__vs__(R)` returns a positive number
* <% check({a=10, b=20, c=30}=={a=10,b=20,c=30})         %> Expect `TRUE` when R is the same object
* <% check(not({a=10, b=20, c=30}=={d=40,e=50,f=60}))    %> Expect `FALSE` when R is a different object
* <% check(not(LLT == {}))                               %> Expect `FALSE` when R is an object and `L.__vs__(R)` returns a negative number
* <% check(LEQ == {})                                    %> Expect `TRUE` when R is an object and `L.__vs__(R)` returns 0
* <% check(not(LGT == {}))                               %> Expect `FALSE` when R is an object and `L.__vs__(R)` returns a positive number
* <% check(not({a=10, b=20, c=30} == LLT))               %> Expect `FALSE` when R is an object and `R.__vs__(L)` returns a negative number
* <% check({a=10, b=20, c=30} == LEQ)                    %> Expect `TRUE` when R is an object and `R.__vs__(L)` returns 0
* <% check(not({a=10, b=20, c=30} == LGT))               %> Expect `FALSE` when R is an object and `R.__vs__(L)` returns a positive number
