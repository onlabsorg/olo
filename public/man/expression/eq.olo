<%  title = "olowiki expression: L == R"  %>
<%  __render__ = import("/bin/markdown")  %>

<% test = import("/bin/test") %>

<% XLT = {__vs__: (R) -> -100} %>
<% XEQ = {__vs__: (R) -> 0} %>
<% XGT = {__vs__: (R) -> +35} %>
<% XNN = {__vs__: (R) -> "abc"} %>
<% foo1: () -> 1 %>
<% foo2: () -> 2 %>
<% foo3: () -> 1 %>

### When L is NOTHING
By default `NOTHING` is equal only to itself and less than any other data type.
* Expect `NOTHING == NOTHING` to be `TRUE`    <% test(NOTHING==NOTHING)            %>
* Expect `NOTHING == number` to be `FALSE`    <% test.not(NOTHING==10)            %>
* Expect `NOTHING == text` to be `FALSE`      <% test.not(NOTHING=="abc")         %>
* Expect `NOTHING == function` to be `FALSE`  <% test.not(NOTHING==foo1)          %>
* Expect `NOTHING == list` to be `FALSE`      <% test.not(NOTHING==[10,20,30])    %>
* Expect `NOTHING == namespace` to be `FALSE` <% test.not(NOTHING=={})            %>

If `R` is a namespace containing the trigger function `__vs__`, the result of
the `==` operation is defined by its return value.
* Expect `FALSE` if `R.__vs__(L)` returns a negative number <% test.not(NOTHING == XLT)         %>
* Expect `TRUE` if `R.__vs__(L)` returns 0                  <% test(NOTHING == XEQ)              %>
* Expect `FALSE` if `R.__vs__(L)` returns a positive number <% test.not(NOTHING == XGT)         %>
* Expect `FALSE` if `R.__vs__(L)` doesn't return a number   <% test.not(NOTHING == XNN)         %>


### When L is a number
By default a number is equal only to the same number.
* Expect `FALSE` when R is `NOTHING`        <% test.not(10==NOTHING)     %> 
* Expect `TRUE` if R is the same number     <% test(10==10)               %> 
* Expect `FALSE` if R is a different number <% test.not(10==20)          %> 
* Expect `FALSE` when R is a string         <% test.not(10=="abc")       %> 
* Expect `FALSE` if R is a function         <% test.not(10==foo1)        %> 
* Expect `FALSE` when R is a list           <% test.not(10==[10,20,30])  %> 
* Expect `FALSE` when R is a namespace      <% test.not(10=={})          %> 

If `R` is a namespace containing the trigger function `__vs__`, the result of
the `==` operation is defined by its return value.
* Expect `FALSE` if `R.__vs__(L)` returns a negative number <% test.not(10 == XLT)         %>
* Expect `TRUE` if `R.__vs__(L)` returns 0                  <% test(10 == XEQ)              %>
* Expect `FALSE` if `R.__vs__(L)` returns a positive number <% test.not(10 == XGT)         %>
* Expect `FALSE` if `R.__vs__(L)` doesn't return a number   <% test.not(10 == XNN)         %>


### When L is a string
By default a text is equal only to the same text.
* Expect `FALSE` wher R is `NOTHING`            <% test.not("abc"==NOTHING) %>
* Expect `FALSE` when R is a number             <% test.not("abc"==10) %> 
* Expect `TRUE` when R is the same string       <% test("abc"=="abc") %> 
* Expect `FALSE` when R is a different string   <% test.not("abc"=="def") %> 
* Expect `FALSE` if R is a function             <% test.not("abc"==foo1) %> 
* Expect `FALSE` when R is a list               <% test.not("abc"==[10,20,30]) %> 
* Expect `FALSE` when R is a namespace          <% test.not("abc"=={}) %> 

If `R` is a namespace containing the trigger function `__vs__`, the result of
the `==` operation is defined by its return value.
* Expect `FALSE` if `R.__vs__(L)` returns a negative number <% test.not("abc" == XLT) %>
* Expect `TRUE` if `R.__vs__(L)` returns 0                  <% test("abc" == XEQ) %>
* Expect `FALSE` if `R.__vs__(L)` returns a positive number <% test.not("abc" == XGT) %>
* Expect `FALSE` if `R.__vs__(L)` doesn't return a number   <% test.not("abc" == XNN) %>


### When L is a function
By default only functions with the same body AST are equal. Native javascript
functions body is serialized.
* Expect `FALSE` wher R is `NOTHING`                                <% test.not(foo1==NOTHING) %> 
* Expect `FALSE` when R is a number                                 <% test.not(foo1==10) %> 
* Expect `FALSE` when R is a string                                 <% test.not(foo1=="abc") %> 
* Expect `TRUE` when R is a function with the same body as L        <% test(foo1 == foo3) %> 
* Expect `FALSE` when R is a function with different body than L    <% test.not(foo1 == foo2) %> 
* Expect `FALSE` when R is a list                                   <% test.not(foo1==[10,20,30]) %> 
* Expect `FALSE` when R is a namespace                              <% test.not(foo1=={}) %> 

If `R` is a namespace containing the trigger function `__vs__`, the result of
the `==` operation is defined by its return value.
* Expect `FALSE` if `R.__vs__(L)` returns a negative number <% test.not(foo1 == XLT) %>
* Expect `TRUE` if `R.__vs__(L)` returns 0                  <% test(foo1 == XEQ) %>
* Expect `FALSE` if `R.__vs__(L)` returns a positive number <% test.not(foo1 == XGT) %>
* Expect `FALSE` if `R.__vs__(L)` doesn't return a number   <% test.not(foo1 == XNN) %>


### When L is a list
By default lists are equal only to other lists having the same items.
* Expect `FALSE` wher R is `NOTHING`        <% test.not([10,20,30]==NOTHING) %> 
* Expect `FALSE` when R is a number         <% test.not([10,20,30]==10) %> 
* Expect `FALSE` when R is a string         <% test.not([10,20,30]=="abc") %> 
* Expect `FALSE` when R is a function       <% test.not([10,20,30]==foo1) %> 
* Expect `TRUE` when R is the same list     <% test([10,20,30]==[10,20,30]) %> 
* Expect `FALSE` when R is a different list <% test.not([10,20,30]==[40,50,60]) %> 
* Expect `FALSE` when R is a namespace      <% test.not([10,20,30]=={}) %> 

If `R` is a namespace containing the trigger function `__vs__`, the result of
the `==` operation is defined by its return value.
* Expect `FALSE` if `R.__vs__(L)` returns a negative number <% test.not([1,2,3] == XLT) %>
* Expect `TRUE` if `R.__vs__(L)` returns 0                  <% test([1,2,3] == XEQ) %>
* Expect `FALSE` if `R.__vs__(L)` returns a positive number <% test.not([1,2,3] == XGT) %>
* Expect `FALSE` if `R.__vs__(L)` doesn't return a number   <% test.not([1,2,3] == XNN) %>


### When L is a namespace
By default namespaces are equal to other namespaces if they contain the same names
and corresponding names map to the same value.
* Expect `FALSE` wher R is `NOTHING`                            <% test.not({a=10, b=20, c=30}==NOTHING) %> 
* Expect `FALSE` when R is a number                             <% test.not({a=1,b=2,c=3}==10) %> 
* Expect `FALSE` when R is a string                             <% test.not({a=1,b=2,c=3}=="abc") %> 
* Expect `FALSE` when R is a function                           <% test.not({a=1,b=2,c=3}==foo1) %> 
* Expect `FALSE` when R is a list                               <% test.not({a=1,b=2,c=3}==[1,2,3]) %> 
* Expect `TRUE` when R is a namespace with the same content     <% test({a=1,b=2,c=3}=={a=1,b=2,c=3}) %> 
* Expect `FALSE` when R is a namespace with different content   <% test.not({a=1, b=20, c=30}=={d=40,e=50,f=60}) %> 

If `L` containis the trigger function `__vs__`, the result of the `==` operation 
is defined by its return value.
* Expect `FALSE` when R is `NOTHING` and `L.__vs__(R)` returns a negative number    <% test.not(XLT == NOTHING) %> 
* Expect `FALSE` when R is a number and `L.__vs__(R)` returns a negative number     <% test.not(XLT == 10) %> 
* Expect `FALSE` when R is a string and `L.__vs__(R)` returns a negative number     <% test.not(XLT == "abc") %> 
* Expect `FALSE` when R is a function and `L.__vs__(R)` returns a negative number   <% test.not(XLT == foo1) %> 
* Expect `FALSE` when R is a list and `L.__vs__(R)` returns a negative number       <% test.not(XLT == [1,2,3]) %> 
* Expect `FALSE` when R is a namespace and `L.__vs__(R)` returns a negative number  <% test.not(XLT == {a=1,b=2,c=3}) %> 
* Expect `TRUE` when R is `NOTHING` and `L.__vs__(R)` returns a 0   <% test(XEQ == NOTHING) %> 
* Expect `TRUE` when R is a number and `L.__vs__(R)` returns a 0    <% test(XEQ == 10) %> 
* Expect `TRUE` when R is a string and `L.__vs__(R)` returns a 0    <% test(XEQ == "abc") %> 
* Expect `TRUE` when R is a function and `L.__vs__(R)` returns 0    <% test(XEQ == foo1) %> 
* Expect `TRUE` when R is a list and `L.__vs__(R)` returns 0        <% test(XEQ == [1,2,3]) %> 
* Expect `TRUE` when R is a namespace and `L.__vs__(R)` returns 0   <% test(XEQ == {a=1,b=2,c=3}) %> 
* Expect `FALSE` when R is `NOTHING` and `L.__vs__(R)` returns a positive number    <% test.not(XGT == NOTHING) %> 
* Expect `FALSE` when R is a number and `L.__vs__(R)` returns a positive number     <% test.not(XGT == 10) %> 
* Expect `FALSE` when R is a string and `L.__vs__(R)` returns a positive number     <% test.not(XGT == "abc") %> 
* Expect `FALSE` when R is a function and `L.__vs__(R)` returns a positive number   <% test.not(XGT == foo1) %> 
* Expect `FALSE` when R is a list and `L.__vs__(R)` returns a positive number       <% test.not(XGT == [1,2,3]) %> 
* Expect `FALSE` when R is a namespace and `L.__vs__(R)` returns a positive number  <% test.not(XGT == {a=1,b=2,c=3}) %> 
* Expect `FALSE` when R is `NOTHING` and `L.__vs__(R)` doesn't return a number    <% test.not(XNN == NOTHING) %> 
* Expect `FALSE` when R is a number and `L.__vs__(R)` doesn't return a number     <% test.not(XNN == 10) %> 
* Expect `FALSE` when R is a string and `L.__vs__(R)` doesn't return a number     <% test.not(XNN == "abc") %> 
* Expect `FALSE` when R is a function and `L.__vs__(R)` doesn't return a number   <% test.not(XNN == foo1) %> 
* Expect `FALSE` when R is a list and `L.__vs__(R)` doesn't return a number       <% test.not(XNN == [1,2,3]) %> 


If `L` doesn't contain the `__vs__` function but `R` does, the result of the `==` 
operation is defined by its return value.
* Expect `FALSE` if `R.__vs__(L)` returns a negative number <% test.not({a=1,b=2,c=3} == XLT) %>
* Expect `TRUE` if `R.__vs__(L)` returns 0                  <% test({a=1,b=2,c=3} == XEQ) %>
* Expect `FALSE` if `R.__vs__(L)` returns a positive number <% test.not({a=1,b=2,c=3} == XGT) %>
* Expect `FALSE` if `R.__vs__(L)` doesn't return a number   <% test.not({a=1,b=2,c=3} == XNN) %>




