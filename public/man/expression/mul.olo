<%  title = "olowiki expression: L * R"  %>
<%  __render__ = import("/bin/markdown")  %>

<% test = import("/bin/test") %>
<% foo: () -> "this is a function" %>


##### When L is NOTHING
* It should return NOTHING if R is NOTHING                                      <% test(NOTHING * NOTHING == NOTHING) %>
* It should return NOTHING if R is a number                                     <% test(NOTHING * 10 == NOTHING) %>
* It should return NOTHING if R is a string                                     <% test(NOTHING * "abc" == NOTHING) %>
* It should return NOTHING if R is a function                                   <% test(NOTHING * foo == NOTHING) %>
* It should return NOTHING if R is a list                                       <% test(NOTHING * [1,2,3] == NOTHING) %>
* It should return NOTHING if R is a namespace                                  <% test(NOTHING * {a=1,b=2,c=3} == NOTHING) %>
* It should delegate to `R.__mul__(L)` if it exists                             <% R = {__mul__: (L) -> `R * NOTHING`} %> <% test(NOTHING * R == "R * NOTHING") %>

##### When L is a number
* It should return NOTHING if R is NOTHING                                      <% test(10 * NOTHING == NOTHING) %>
* It should return the L*R if R is a number                                     <% test(10 * 2 == 20) %>
* It should repeat L times R if R is a string                                   <% test(3 * "Abc" == "AbcAbcAbc") %>
* It should throw an error if R is a function                                   <% test.throws({__call__: () -> 10 * foo}) %>
* It should repeat L times R if R is a list                                     <% test(3 * [1,2,3] == [1,2,3,1,2,3,1,2,3]) %>
* It should return R if it is a namespace                                       <% test(3 * {a=1,b=2,c=3} == {a=1,b=2,c=3}) %>
* It should delegate to `R.__mul__(L)` if it exists                             <% R = {__mul__: (L) -> 2 * L} %> <% test(10 * R == 20) %>

##### When L is a string
* It should return NOTHING if R is NOTHING                                      <% test("abc" * NOTHING == NOTHING) %>
* It should repeat R times L if R is a number                                   <% test("Abc" * 3 == "AbcAbcAbc") %>
* It should throw an error if R is a string                                     <% test.throws({__call__: () -> "abc" * "def"}) %>
* It should throw an error if R is a function                                   <% test.throws({__call__: () -> "abc" * foo}) %>
* It should throw an error if R is a list                                       <% test.throws({__call__: () -> "abc" * [] }) %>
* It should throw an error if R is a namespace                                  <% test.throws({__call__: () -> "abc" * {} }) %>
* It should delegate to `R.__mul__(L)` if it exists                             <% R = {__mul__: (L) -> "R * " + L} %> <% test("abc" * R == "R * abc") %>

##### When L is a function
* It should return NOTHING if R is NOTHING                                      <% test(foo * NOTHING == NOTHING) %>
* It should throw an error if R is a number                                     <% test.throws({__call__: () -> foo * 10}) %>
* It should throw an error if R is a string                                     <% test.throws({__call__: () -> foo * "abc"}) %>
* It should throw an error if R is a function                                   <% test.throws({__call__: () -> foo * foo}) %>
* It should throw an error if R is a list                                       <% test.throws({__call__: () -> foo * [] }) %>
* It should throw an error if R is a namespace                                  <% test.throws({__call__: () -> foo * {} }) %>
* It should delegate to `R.__mul__(L)` if it exists                             <% R = {__mul__: (L) -> "R * " + L[1] } %> <% test(["i1","i2","i3"] * R == "R * i1") %>

##### When L is a list
* It should return NOTHING if R is NOTHING                                      <% test([1,2,3] * NOTHING == NOTHING) %>
* It should repeat R times L if R is a number                                   <% test([1,2,3] * 3 == [1,2,3,1,2,3,1,2,3]) %>
* It should throw an error if R is a string                                     <% test.throws({__call__: () -> [1,2,3] * "abc"}) %>
* It should throw an error if R is a function                                   <% test.throws({__call__: () -> [1,2,3] * foo}) %>
* It should throw an error if R is a list                                       <% test.throws({__call__: () -> [1,2,3] * [4,5,6]}) %>
* It should throw an error if R is a namespace                                  <% test.throws({__call__: () -> [1,2,3] * {} }) %>
* It should delegate to `R.__mul__(L)` if it exists                             <% R = {__mul__: (L) -> "R * [" + L[1] + L[2] + L[3] + "]" } %> <% test(['A','B','C'] * R == "R * [ABC]" ) %>

##### When L is a namespace
* It should return NOTHING if R is NOTHING                                      <% test({a=1,b=2,c=3} * NOTHING == NOTHING) %>
* It should return L if R is a number                                           <% test({a=1,b=2,c=3} * 2 == {a=1,b=2,c=3}) %>
* It should throw an error if R is a string                                     <% test.throws({__call__: () -> {a=1,b=2,c=3} * "abc"}) %>
* It should throw an error if R is a function                                   <% test.throws({__call__: () -> {a=1,b=2,c=3} * foo}) %>
* It should throw an error if R is a list                                       <% test.throws({__call__: () -> {a=1,b=2,c=3} * [] }) %>
* It should throw an error if R is a namespace                                  <% test.throws({__call__: () -> {a=1,b=2,c=3} * {} }) %>
* It should delegate to `L.__mul__(R)` if it exists                             <% L = {__mul__: (R) -> 2*R} %> <% test(L * 10 == 20) %>
* It should delegate to `R.__mul__(L)` if it exists                             <% R = {__mul__: (L) -> 3*L} %> <% test(10 * R == 30 ) %>
