<% title = "A[B]" %>
<% __render__ = import("/bin/markdown") %>
<% test = import("/lib/test") %>

The `A[B]` expression returns part of A content based on the key B.

<% A = {
    NTG = NOTHING,
    num = 10,
    str = "123456789",
    lst = [10, 20, 30, 40, 50, 60, 70, 80, 90],
    nsp = {n1=10, n2=20, n3=30, n4=40, n5=50, n6=60, n7=70, n8=80, n9=90}
    } %>


##### When B is a NOTHING

* <% test.check(A.NTG[NOTHING] == NOTHING) %>   It should return `NOTHING` if A is `NOTHING`
* <% test.check(A.num[NOTHING] == NOTHING) %>   It should return `NOTHING` if A is a number
* <% test.check(A.str[NOTHING] == "") %>        It should return an empty string if A is a string
* <% test.check(A.lst[NOTHING] == NOTHING) %>   It should return `NOTHING` if A is a list
* <% test.check(A.nsp[NOTHING] == NOTHING) %>   It should return `NOTHING` if A is a namespace


##### When B is a positive number

* <% test.check(A.NTG[2] == NOTHING) %>     It should return `NOTHING` if A is `NOTHING`
* <% test.check(A.num[2] == NOTHING) %>     It should return `NOTHING` if A is a number
* <% test.check(A.str[2] == "2") %>         It should return the B-th character if A is a string
* <% test.check(A.str[100] == "") %>        It should return an empty string if A is a string and B is out of range
* <% test.check(A.lst[2] == 20) %>          It should return the B-th item if A is a list
* <% test.check(A.lst[100] == NOTHING) %>   It should return `NOTHING` if A is a list and B is out of range
* <% test.check(A.nsp[2] == NOTHING) %>     It should return `NOTHING` if A is a namespace


##### When B is a negative number

* <% test.check(A.NTG[-2] == NOTHING) %> It should return `NOTHING` if A is `NOTHING`
* <% test.check(A.num[-2] == NOTHING) %> It should return `NOTHING` if A is a number
* <% test.check(A.str[-2] == "8") %>     It should return the B-th character counting from the end if A is a string
* <% test.check(A.lst[-2] == 80) %>      It should return the B-th item counting from the end if A is a list
* <% test.check(A.nsp[-2] == NOTHING) %> It should return `NOTHING` if A is a namespace


##### When B is a string

* <% test.check(A.NTG["n2"] == NOTHING) %>  It should return `NOTHING` if A is `NOTHING`
* <% test.check(A.num["n2"] == NOTHING) %>  It should return `NOTHING` if A is a number
* <% test.check("12xx567xx"["xx"] == [3,8]) %>       It should return an array with the indexs where the substring `B` is found in `A`
* <% test.check(A.lst["n2"] == NOTHING) %>  It should return `NOTHING` if A is a list
* <% test.check(A.nsp["n2"] == 20) %>       It should return the value mapped to the name B if A is a namespace
* <% test.check(A.nsp["m"] == NOTHING) %>   It should return `NOTHING` if A is a namespace that doesn't contain the name B


##### When B is a list

If the query key is a list, then the query is repeated once for each item of B
and the result is returned as a list (or a string of characters in case A is a
string).

* <% test.check(A.NTG[[2,3,4]] == [NOTHING, NOTHING, NOTHING]) %>   It should return a list with same size as B buth filled with `NOTHING` items if A is `NOTHING`
* <% test.check(A.num[[2,3,4]] == [NOTHING, NOTHING, NOTHING]) %>   It should return a list with same size as B buth filled with `NOTHING` items if A is a number
* <% test.check(A.str[[2,4,-4]] == "246") %>                        It should return a string made of the characters matching each item of B if A is a string
* <% test.check(A.lst[[2,4,-4]] == [20, 40, 60]) %>                 It should return a list made of the items matching each item of B if A is a list
* <% test.check(A.nsp[["n2", 3, "n4"]] == [20, NOTHING, 40]) %>     It should return a list made of the values matching each name of B if A is a namespace

List keys allow the use of the `...` special item which expands the key list as 
follows:

* <% test.check(A.lst[[2,...,5]] == [20,30,40,50]) %>   A[2, ..., 5] is equivalent to A[2, 3, 4, 5] 
* <% test.check(A.str[[...,4]] == "1234") %>            A[..., 4] is equivalent to A[1, 2, 3, 4]
* <% test.check(A.str[[6,...]] == "6789") %>            A[6, ...] is equivalent to A[6, 7, 8, ..., s] where s is the size of A
* <% test.check(A.str[[...]] == "123456789") %>         A[...] is equivalent to A[1,2,3,...,s]  where s is the size of A


##### When B is a namespace

* <% test.check(A.NTG[{}] == NOTHING) %>   It should return `NOTHING` if A is `NOTHING`
* <% test.check(A.num[{}] == NOTHING) %>   It should return `NOTHING` if A is a number
* <% test.check(A.str[{}] == "") %>        It should return an empty string if A is a string
* <% test.check(A.lst[{}] == NOTHING) %>   It should return `NOTHING` if A is a list
* <% test.check(A.nsp[{}] == NOTHING) %>   It should return `NOTHING` if A is a namespace

The behaviour of the query is different if `A` is a list and `B` contains one
of the functions `__filter__`, `__map__` or `__reduce__`.

**When `A` is a list and `B.__filter__` is a function**, the `__filter__` function
gets called once for each item of `A` with parameters `A[i], i, A`. If it returns
true, the item `A[i]` will be added to the retuned list, otherwise not.
<% test.check(A.lst[{__filter__: (item,i,list) -> item mod 20 == 0}] == [20,40,60,80]) %>

**When `A` is a list and `B.__map__` is a function**, the `__map__` function
gets called once for each item of `A` with parameters `A[i], i, A`. The 
retrun value of each call is added to the returned list.
<% test.check(A.lst[{__map__: (item,i,list) -> item + i}] == [11,22,33,44,55,66,77,88,99]) %>

**When `A` is a list and `B.__reduce__` is a function**, the `__reduce__` function
gets called once for each item of `A` with parameters `accumulator, A[i], i, A`. `accumulator`
is the return value of the previous call or `NOTHING` for the first call. The 
retrun value of the last call is returned.
<% test.check(A.lst[{__reduce__: (acc, item,i,list) -> item if item > acc else acc}] == 90) %>



##### When A is a namespace containing a `__get__` function
The `__get__` will be called with `B` as parameter and the return value returned.

For example, when A is the wollowing namespace:

'''
<% "<"+"%" %> A = {
    
    m = 10,
    
    __get__: (key) -> m * key
    
    } <% "%"+">" %>
'''
<% A = { m = 10, __get__: (key) -> m * key } %>

we then expect A[3] to return `10*3`. <% test.check(A[3] == 30) %>  
  
If B is a list, then `__get__` will be called on time for each item of B and the
results returen in a list. <% test.check(A[[3,6,9]] == [30,60,90]) %>
