<% title = "olowiki inline expressions" %>
<% __render__ = import("/bin/markdown") %>

<% test = import("/lib/test") %>
<% check = test.check %>


An olowiki document is a template containing inline code enclosed between &lt;%
and %&gt;. The inline code can be of two types:

* `Expressions` which are replaced by their value when the document is rendered
* `Declaration statements` assigning a value to a name, which do not render any value

For example the folllwing template:

```
Let's define some variable ... <% "<"+"%" %> v = "DONE" <% "%"+">" %> 
and then use it: <% "<"+"%" %> v+"!" <% "%"+">" %>
```

will render to the following HTML:

```
Let's define some variable ... and then use it: DONE!
```


### Data types
The olowiki expression language has the following six data types:

* **NOTHING**: a singleton representing nothingness
* [number](./types/number): the numeric real type [<% test.summary("/doc/expression/types/number") %>]
* [string](./types/string): a sequence of characters (piece of text) [<% test.summary("/doc/expression/types/string") %>]
* [function](./types/function): a parametric expression [<% test.summary("/doc/expression/types/function") %>]
* [list](./types/list): an ordered sequence of values of any type [<% test.summary("/doc/expression/types/list") %>]
* [namespace](./types/namespace): a container for variables accessible with dot-noation [<% test.summary("/doc/expression/types/namespace") %>]


### Boolean operations

* [L == R](./eq) [<% test.summary("/doc/expression/eq") %>]
* [L != R](./ne) [<% test.summary("/doc/expression/ne") %>]
* [L < R](./lt) [<% test.summary("/doc/expression/lt") %>]
* [L <= R](./le) [<% test.summary("/doc/expression/le") %>]
* [L > R](./gt) [<% test.summary("/doc/expression/gt") %>]
* [L >= R](./ge) [<% test.summary("/doc/expression/ge") %>]
* [L and R](./and) [<% test.summary("/doc/expression/and") %>]
* [L or R](./or) [<% test.summary("/doc/expression/or") %>]

### Arithmetic operations

* [L + R](./add) [<% test.summary("/doc/expression/add") %>]
* [L - R](./sub) [<% test.summary("/doc/expression/sub") %>]
* [L * R](./mul) [<% test.summary("/doc/expression/mul") %>]
* [L / R](./div) [<% test.summary("/doc/expression/div") %>]
* [L ^ R](./pow) [<% test.summary("/doc/expression/pow") %>]
* [L mod R](./mod) [<% test.summary("/doc/expression/mod") %>]


### Other stuff

* [Conditional expression](./if-else) `A if B else C` [<% test.summary("/doc/expression/if-else") %>]
* [query](./query) `A[B]` [<% test.summary("/doc/expression/query") %>]
* [URI](./uri) namespace [<% test.summary("/doc/expression/uri") %>]


### Builtin functions

* [size(X)](./size) [<% test.summary("/doc/expression/size") %>]
* [bool(X)](./bool) [<% test.summary("/doc/expression/bool") %>]
* [not(X)](./not) [<% test.summary("/doc/expression/not") %>]
* [str(X)](./str) [<% test.summary("/doc/expression/str") %>]
* [list(X)](./list) [<% test.summary("/doc/expression/list") %>]
* [range(a, b)](./range) [<% test.summary("/doc/expression/range") %>]
* [import(uri)](./import) [<% test.summary("/doc/expression/import") %>]
* [eval(X)](./eval) [<% test.summary("/doc/expression/eval") %>]


### Standard libraries 

More standard functions are available as external modules in the [lib store](/lib/index)
and in the [bin store](/doc/binaries/index).

