<% title = "function: bool(X)" %>
<% __render__ = import("/bin/markdown") %>
<% test = import("/bin/test") %>

<% foo1: () -> 10 %>


The `bool` function returns `TRUE` or `FALSE` according to the following rules:

* It should return `FALSE` if `X` is `NOTHING`                                  <% test(bool(NOTHING) == FALSE) %>
* It should return `TRUE` if `X` is a non-null number                           <% test(bool(10) == TRUE) %>
* It should return `FALSE` if `X` is 0                                          <% test(bool(0) == FALSE) %>
* It should return `TRUE` if `X` is a non-empty string                          <% test(bool("abc") == TRUE) %>
* It should return `FALSE` if `X` is an empty string                            <% test(bool("") == FALSE) %>
* It should return `TRUE` if `X` is a function                                  <% test(bool(foo1) == TRUE) %>
* It should return `TRUE` if `X` is a non-empty list                            <% test(bool([1,2,3]) == TRUE) %>
* It should return `FALSE` if `X` is an empty list                              <% test(bool([]) == FALSE) %>
* It should return `TRUE` if `X` is a non-empty namespace                       <% test(bool({a=1}) == TRUE) %>
* It should return `FALSE` if `X` is an empty namespace                         <% test(bool({}) == FALSE) %>
* It should return `FALSE` if `X` is an namespace containing only hidden names  <% test(bool({_a=1,_b=2}) == FALSE) %>

If X is a namespace containing the `X.__bool__()` trigger, bool(X) will delegate 
to it, as long as the trigger returns `TRUE` or `FALSE`.                        <% test( bool({__bool__: () -> TRUE}) == TRUE and 
                                                                                         bool({__bool__: () -> FALSE}) == FALSE and
                                                                                         bool({__bool__: () -> "...", a=1}) == TRUE and
                                                                                         bool({__bool__: () -> "..."}) == FALSE ) %>