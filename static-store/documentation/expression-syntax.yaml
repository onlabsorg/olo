title: olo expressions
author: m.delbuono@gmail.com
public: true
constants:
    pi: 3.14
    x: 10
ocb: '{{'
ccb: '}}'
x: 10
index: !markdown |

    In an olowiki document source you can use expressions in two cases:

    * to define a value of a property: `propname: != <expression>`
    * between double brackets in a template: `templatename: !template "This is a template with an {{ocb}}expression{{ccb}}"`  


    # Expression syntax


    ### Property access

    * `constants.pi -> {{constants.pi}}`
    * `constants['pi'] -> {{constants['pi']}}`


    ### Aritmetic operations

    | Operation      | Expression | Result        | 
    |----------------|------------|---------------|
    | Sum            | `200 + x`  | `{{200+x}}`   |
    | Subtraction    | `200 - x`  | `{{200-x}}`   | 
    | Multiplication | `200 * x`  | `{{200*x}}`   |
    | Division       | `200 / x`  | `{{200/x}}`   |
    | Power          | `x^2`      | `{{x^2}}`     |
    | Remainder      | `x mod 4`  | `{{x mod 4}}` |
    | Positive       | `+x`       | `{{+x}}`      |
    | Negative       | `-x`       | `{{-x}}`      |


    ### Comparison

    | Operation        | Expression | Result        | 
    |------------------|------------|---------------|
    | Equal            | `x == 10`  | `{{x == 10}}` |
    | Not equal        | `x != 10`  | `{{x != 10}}` | 
    | Greater          | `x > 10`   | `{{x > 10}}`  |
    | Greater or equal | `x >= 10`  | `{{x >= 10}}` |
    | Lower            | `x < 10`   | `{{x < 10}}`  |
    | Lower or equal   | `x <= 10`  | `{{x <= 10}}` |


    ### Boolean operations

    | Operation        | Expression          | Result                  | 
    |------------------|---------------------|-------------------------|
    | Logic and        | `x > 5 and x < 15`  | `{{x > 5 and x < 15}}`  |
    | Logic or         | `x == 5 or x == 7`  | `{{x == 5 or x == 7}}`  | 
    | Logic not        | `not (x == 10)`     | `{{not (x == 10)}}`     | 


    ### Conditional expressions

    The expression `value if condition` renders `value` if `condition` is
    `true`, otherwise renders `undefined`. This can used in combination with
    `or` to obtain a ternary expression.

    `1/(x-10) if x != 10 or "div by zero"` -> `{{1/(x-10) if x != 10 or "div by zero"}}` 


    ### Function call

    Functions available in the expression scope can be called as `func(arg1, arg2, ...)`.
