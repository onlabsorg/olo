#!/usr/bin/env node

const OloWiki = require("../index");
const olowiki = new OloWiki( process.cwd() );

const cmd = require("commander");
const cli = cmd.version(OloWiki.getVersion(), "-v --version");

cli.command("start [port]")
   .description("Start the olowiki server.")
   .action(async (port=8010) => {
       await olowiki.serve(port);
       console.log(`olowiki server listening on port ${port}`);
   });
   
cli.command("init <ownerId>")
   .description("Initialize a new olowiki instance in the working directory.")
   .action(async (ownerId) => {
       try {
           await olowiki.init(ownerId);
           console.log("olowiki instance successfully created.");
           console.log("edit the olowiki-config.js to configure your e-mail server");                  
       } catch (error) {
           console.log(error.message);
       }
   });

cli.command("render <path> [args...]")
    .description("Fetch and render an olodocument")
    .action(async (path, args) => {
        const parseParams = require("@onlabsorg/olojs/lib/tools/parameters-parser");
        const argns = parseParams(...args);
        const renderedDoc = await olowiki.render(path, argns);
        console.log(renderedDoc);
    });

cli.command("gen-token <user> [attributes...]")
   .description("Generate and identity token for the passed user name.")
   .action((userId, attributes) => {
       const token = olowiki.generateToken(userId, attributes);
       console.log(token);
   });

cli.command("parse-token <toekn>")
  .description("Verifies a user token and displays its payload.")
  .action((token) => {
      const user = olowiki.parseToken(token);
      console.log({
          id: user.id,
          attributes: user.attributes
      });
  });

cli.parse( process.argv );
